(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./client/src/main.js":[function(require,module,exports){
window.game = new Phaser.Game(800, 480, Phaser.CANVAS, '');
window.socket; //Refactor socket stuff into its own class?
window.player;
window.remotePlayers = {};
window.level;

startGame();

function startGame() {
	game.state.add('Boot', require('./game/states/Boot'));
	game.state.add('Preloader', require('./game/states/Preloader'));
	game.state.add('Level', require('./game/states/Level'));

	game.state.start('Boot');
};
},{"./game/states/Boot":"C:\\Projects\\bomb-arena\\client\\src\\game\\states\\Boot.js","./game/states/Level":"C:\\Projects\\bomb-arena\\client\\src\\game\\states\\Level.js","./game/states/Preloader":"C:\\Projects\\bomb-arena\\client\\src\\game\\states\\Preloader.js"}],"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\Bomb.js":[function(require,module,exports){
var Bomb = function(x, y, id) {
	Phaser.Sprite.call(this, game, x, y, "bomb");
	this.id = id;

	this.anchor.setTo(.5, .5);
	game.physics.enable(this, Phaser.Physics.ARCADE);
	game.add.existing(this);
}

Bomb.prototype = Object.create(Phaser.Sprite.prototype);

module.exports = Bomb;
},{}],"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\Player.js":[function(require,module,exports){
var Bomb = require('./bomb');

var Player = function(x, y) {
	Phaser.Sprite.call(this, game, x, y, 'bomberman');

  this.facing = 'down';
  this.anchor.setTo(.5, .5);

	game.physics.enable(this, Phaser.Physics.ARCADE);

	this.animations.add('down', [0, 1, 2, 3, 4], 10, true);
  	this.animations.add('up', [5, 6, 7, 8, 9], 10, true);
  	this.animations.add('right', [10, 11, 12], 10, true);
  	this.animations.add('left', [13, 14, 15], 10, true);

	game.add.existing(this);
};

Player.prototype = Object.create(Phaser.Sprite.prototype);

Player.prototype.handleInput = function() {
  this.handleMotionInput();
  this.handleBombInput();
};

Player.prototype.handleMotionInput = function() {
	  var moving = true;;

  	if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
  		this.body.velocity.y = 0;
  		this.body.velocity.x = -200;
  		this.facing = 'left';
  	} else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
  		this.body.velocity.y = 0;
  		this.body.velocity.x = 200;
  		this.facing = 'right';
  	} else if (game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
  		this.body.velocity.x = 0;
  		this.body.velocity.y = -200;
  		this.facing = 'up';
  	} else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN)) {
  		this.body.velocity.x = 0;
  		this.body.velocity.y = 200;
  		this.facing = 'down';
  	} else {
      moving = false;
  		this.body.velocity.x = 0;
  		this.body.velocity.y = 0;
  		this.animations.stop();
  	}

  	if(moving)  {
      this.animations.play(this.facing);
      socket.emit("move player", {x: this.position.x, y: this.position.y, facing: this.facing});
    }
  };

  Player.prototype.handleBombInput = function() {
    if(game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR) && !game.physics.arcade.overlap(this, level.bombs)) {
      var bomb = new Bomb(this.position.x, this.position.y, game.time.now);

      // Bombs for a player are identified by timestamp.
      level.bombs.add(bomb);
      socket.emit("place bomb", {x: bomb.x, y: bomb.y, id: bomb.id});
    }
  };

module.exports = Player;
},{"./bomb":"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\bomb.js"}],"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\RemotePlayer.js":[function(require,module,exports){
var RemotePlayer = function(x, y, id) {
	this.id = id;
	this.previousPosition = {x: x, y: y};
	this.lastMoveTime = 0;
	this.targetPosition;

	Phaser.Sprite.call(this, game, x, y, "bomberman");

	game.physics.enable(this, Phaser.Physics.ARCADE);

	this.anchor.setTo(.5, .5);

	this.animations.add('down', [0, 1, 2, 3, 4], 10, true);
  	this.animations.add('up', [5, 6, 7, 8, 9], 10, true);
  	this.animations.add('right', [10, 11, 12], 10, true);
  	this.animations.add('left', [13, 14, 15], 10, true);

	game.add.existing(this);
};

RemotePlayer.prototype = Object.create(Phaser.Sprite.prototype);

module.exports = RemotePlayer;
},{}],"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\bomb.js":[function(require,module,exports){
arguments[4]["C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\Bomb.js"][0].apply(exports,arguments)
},{}],"C:\\Projects\\bomb-arena\\client\\src\\game\\states\\Boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    // Fill in later.
  },

  create: function () {
    game.stage.disableVisibilityChange = true; // So that game doesn't stop when window loses focus.
    game.input.maxPointers = 1;

    if (game.device.desktop) {
      game.stage.scale.pageAlignHorizontally = true;
    } else {
      game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
      game.stage.scale.minWidth =  480;
      game.stage.scale.minHeight = 260;
      game.stage.scale.maxWidth = 640;
      game.stage.scale.maxHeight = 480;
      game.stage.scale.forceLandscape = true;
      game.stage.scale.pageAlignHorizontally = true;
      game.stage.scale.setScreenSize(true);
    }

    game.state.start('Preloader');
  }
};

},{}],"C:\\Projects\\bomb-arena\\client\\src\\game\\states\\Level.js":[function(require,module,exports){
var Player = require('../entities/Player');
var RemotePlayer = require('../entities/RemotePlayer');
var Bomb = require('../entities/Bomb');

var Level = function () {};

module.exports = Level;

Level.prototype = {

  create: function () {
    level = this;
  	// socket = io("https://limitless-brook-9339.herokuapp.com:443");
    socket = io("http://localhost:8120");
    player = new Player(Math.round(Math.random() * game.camera.width), Math.round(Math.random() * game.camera.height));


    this.bombs = game.add.group();
    game.physics.enable(this.bombs, Phaser.Physics.ARCADE);

    this.lastFrameTime;

    setEventHandlers();
  },

  update: function() {
  	player.handleInput();
  	this.stopAnimationForMotionlessPlayers();
  	this.storePreviousPositions();

    for(var id in remotePlayers) {
      var remotePlayer = remotePlayers[id];
      if(remotePlayer.distanceToCover && this.lastFrameTime) {
        if((remotePlayer.distanceCovered.x < Math.abs(remotePlayer.distanceToCover.x) || remotePlayer.distanceCovered.y < Math.abs(remotePlayer.distanceToCover.y))) {
          var fractionOfTimeStep = (game.time.now - this.lastFrameTime) / 100;
          var distanceCoveredThisFrameX = fractionOfTimeStep * remotePlayer.distanceToCover.x;
          var distanceCoveredThisFrameY = fractionOfTimeStep * remotePlayer.distanceToCover.y;

          remotePlayer.distanceCovered.x += Math.abs(distanceCoveredThisFrameX);
          remotePlayer.distanceCovered.y += Math.abs(distanceCoveredThisFrameY);

          remotePlayer.position.x += distanceCoveredThisFrameX;
          remotePlayer.position.y += distanceCoveredThisFrameY;
        } else {
          remotePlayer.position.x = remotePlayer.targetPosition.x;
          remotePlayer.position.y = remotePlayer.targetPosition.y;
        }
      }
    }

    this.lastFrameTime = game.time.now;
  },

  storePreviousPositions: function() {
    for(var id in remotePlayers) {
      remotePlayer = remotePlayers[id];
      remotePlayer.previousPosition = {x: remotePlayer.position.x, y: remotePlayer.position.y};
    }
  },

  stopAnimationForMotionlessPlayers: function() {
    for(var id in remotePlayers) {
      remotePlayer = remotePlayers[id];
      if(remotePlayer.previousPosition.x == remotePlayer.position.x && remotePlayer.previousPosition.y == remotePlayer.position.y) {
        remotePlayer.animations.stop();
      }
    }
  }
};

  // TODO: Move this somewhere else.
function setEventHandlers() {
	socket.on("connect", onSocketConnected);
  socket.on("assign id", onAssignId);
  socket.on("disconnect", onSocketDisconnect);
  socket.on("new player", onNewPlayer);
  socket.on("move player", onMovePlayer);
  socket.on("remove player", onRemovePlayer);
  socket.on("place bomb", onPlaceBomb);
  socket.on("detonate", onDetonate);
};

function onSocketConnected() {
	console.log("Connected to socket server.");

	socket.emit("new player", {x: player.position.x, y: player.position.y});
};

function onAssignId(data) {
  player.id = data.id;
}

function onSocketDisconnect() {
	console.log("Disconnected from socket server.");

	this.broadcast.emit("remove player", {id: this.id});
};

function onNewPlayer(data) {
	remotePlayers[data.id] = new RemotePlayer(data.x, data.y, data.id);
};

function onMovePlayer(data) {
  if(!player.id || data.id == player.id) {
    return;
  }

  var movingPlayer = remotePlayers[data.id];

  if(movingPlayer.targetPosition) {
    if(data.x == movingPlayer.targetPosition.x && data.y == movingPlayer.targetPosition.y) {
      return;
    }
    movingPlayer.position.x = movingPlayer.targetPosition.x;
    movingPlayer.position.y = movingPlayer.targetPosition.y;

    movingPlayer.distanceToCover = {x: data.x - movingPlayer.targetPosition.x, y: data.y - movingPlayer.targetPosition.y};
    movingPlayer.distanceCovered = {x: 0, y:0};
  }

  movingPlayer.targetPosition = {x: data.x, y: data.y};
  movingPlayer.lastMoveTime = data.timestamp;

	movingPlayer.animations.play(data.facing);
};

function onRemovePlayer(data) {
	var playerToRemove = remotePlayers[data.id];

	playerToRemove.destroy();

  delete remotePlayers[data.id];
};

function onPlaceBomb(data) {
  level.bombs.add(new Bomb(data.x, data.y, data.id));
};

function onDetonate(data) {
  level.bombs.forEach(function(bomb) {
    if(bomb && bomb.id == data.id) {
      bomb.destroy();
    }
  });
};
},{"../entities/Bomb":"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\Bomb.js","../entities/Player":"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\Player.js","../entities/RemotePlayer":"C:\\Projects\\bomb-arena\\client\\src\\game\\entities\\RemotePlayer.js"}],"C:\\Projects\\bomb-arena\\client\\src\\game\\states\\Preloader.js":[function(require,module,exports){
var Preloader = function () {};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.load.spritesheet("bomberman", "assets/sprites/bomberman.png", 28, 50);
    this.load.spritesheet("bomb", "assets/sprites/bomb.png", 26, 40);
  },

  create: function () {
    game.state.start('Level');
  }
};

},{}]},{},["./client/src/main.js"]);
